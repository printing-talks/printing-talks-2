---
import CallToAction from "./CallToAction.astro";
import Icon from "./Icon.astro";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: "/" },
  { label: "Products", href: "/products/" },
  { label: "About", href: "/about/" },
];
---

<nav
  class="sm:sticky sm:top-4 z-30 rounded-lg flex items-center justify-between p-4 backdrop-blur-2xl mx-auto w-[98%] sm:w-[95%]"
>
  <a href="/" class="site-title">
    <Icon icon="logo" size="3em" />
  </a>
  <!-- <menu-button>
    <template>
      <button class="menu-button" aria-expanded="false">
        <span class="sr-only">Menu</span>
        <Icon icon="list" />
      </button>
    </template>
  </menu-button> -->
  <noscript>
    <ul class="nav-links">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a
              aria-current={Astro.url.pathname === href}
              class:list={[
                "link",
                {
                  active:
                    Astro.url.pathname === href ||
                    (href !== "/" && Astro.url.pathname.startsWith(href)),
                },
              ]}
              href={href}
            >
              {label}
            </a>
          </li>
        ))
      }
    </ul>
  </noscript>
  <noscript>
    <div class="menu-footer">
      <CallToAction href="/#quote-form/">
        View All
        <Icon icon="arrow-right" size="1.2em" />
      </CallToAction>
    </div>
  </noscript>
  <div class="nav-links flex space-x-8">
    {
      textLinks.map(({ label, href }) => (
        <a
          aria-current={Astro.url.pathname === href}
          class:list={[
            "link",
            {
              active:
                Astro.url.pathname === href ||
                (href !== "/" && Astro.url.pathname.startsWith(href)),
            },
          ]}
          href={href}
        >
          {label}
        </a>
      ))
    }
  </div>
  <div class="menu-footer">
    <CallToAction href="/#quote-form/">
      <p class="">Get Quote</p>
    </CallToAction>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      // Hide menu (shown by default to support no-JS browsers).
      const menu = document.getElementById("menu-content")!;
      menu.hidden = true;
      // Add "menu-content" class in JS to avoid covering content in non-JS browsers.
      menu.classList.add("menu-content");

      /** Set whether the menu is currently expanded or collapsed. */
      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false");
        menu.hidden = !expand;
      };

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener("click", () => setExpanded(menu.hidden));

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches);
        btn.hidden = e.matches;
      };
      const mediaQueries = window.matchMedia("(min-width: 50em)");
      handleViewports(mediaQueries);
      mediaQueries.addEventListener("change", handleViewports);
    }
  }
  customElements.define("menu-button", MenuButton);
</script>

<style></style>
