---
import CallToAction from "./CallToAction.astro";
import Icon from "./Icon.astro";

interface Props {
  className?: string | undefined;
  cssPosition?: string | string;
}

const { className, cssPosition } = Astro.props;

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: "/" },
  { label: "Products", href: "/products/" },
  { label: "About", href: "/about/" },
];
---

<header class="relative z-[999] md:sticky top-0 md:top-10 w-full">
  <nav
    class={`w-full rounded-none md:rounded-full md:w-[90%] mx-auto max-w-[1280px]  grid grid-cols-3 auto-cols-max place-content-center gap-4 px-6 py-4 bg-base/50 backdrop-blur-3xl ${className}`}
  >
    <div class="nav-left flex gap-4">
      <button id="mobile-menu-btn" class="visible md:invisible">
        <Icon icon="list" size="1.5em" />
      </button>
      <a href="/" class="site-title" aria-label="Home">
        <Icon icon="logo" size="3em" />
      </a>
    </div>
    <div
      class="nav-links hidden z-[999] md:flex justify-center place-content-center space-x-8"
    >
      {
        textLinks.map(({ label, href }) => (
          <a
            aria-current={Astro.url.pathname === href}
            class="flex items-center justify-center"
            class:list={[
              "link",
              {
                active:
                  Astro.url.pathname === href ||
                  (href !== "/" && Astro.url.pathname.startsWith(href)),
              },
            ]}
            href={href}
          >
            {label}
          </a>
        ))
      }
    </div>
    <div class="nav-right col-span-2 md:col-auto flex items-center justify-end">
      <CallToAction className="rounded-full" href="/#quote-form">
        <p class="">Get Quote</p>
      </CallToAction>
    </div>
  </nav>
  <div
    id="mobile-menu"
    class="md:hidden absolute w-full flex flex-col gap-4 p-4 bg-base/50 backdrop-blur-3xl"
  >
    {
      textLinks.map(({ label, href }) => (
        <a
          aria-current={Astro.url.pathname === href}
          class="flex items-center"
          class:list={[
            "link",
            {
              active:
                Astro.url.pathname === href ||
                (href !== "/" && Astro.url.pathname.startsWith(href)),
            },
          ]}
          href={href}
        >
          {label}
        </a>
      ))
    }
  </div>
</header>

<script>
  const toggleMobileMenu = () => {
    const mobileMenu = document.getElementById("mobile-menu");
    if (mobileMenu) {
      mobileMenu.classList.toggle("show");
    }
  };

  const initMobileMenu = () => {
    const mobileMenuBtn = document.getElementById("mobile-menu-btn");
    if (mobileMenuBtn) {
      mobileMenuBtn.addEventListener("click", toggleMobileMenu);
    }
  };

  if (typeof window !== "undefined") {
    window.addEventListener("load", initMobileMenu);
  }
</script>

<style>
  .link.active {
    font-weight: bold;
  }
  #mobile-menu {
    transition:
      opacity 0.4s ease,
      visibility 0.4s;
    opacity: 0;
    visibility: hidden;
  }

  #mobile-menu.show {
    opacity: 1;
    visibility: visible;
  }
</style>
